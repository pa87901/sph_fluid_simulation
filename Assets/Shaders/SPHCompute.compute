#pragma kernel Integrate // Use the external forces exterted on a particle to move it.
#pragma kernel ComputeForces // Compute pressure and viscosity forces for each particle.
#pragma kernel ComputeDensityPressure // Compute density and pressure for each particle.

// Particle class as it is in the SPH.cs script.
struct Particle {
    float pressure;
    float density;
    float3 currentForce;
    float3 velocity;
    float3 position;
};

RWStructuredBuffer<Particle> _particles;

float particleMass;
float viscosity;
float gasConstant;
float restDensity;
float boundDamping;
// Pre-compute the radius powers as these are expensive.
float radius;
float radius2; // Radius squared.
float radius3; // Radius to power 3.
float radius4; // Radius to power 4.
float radius5; // Radius to power 5.
float pi;
int particleLength;
float timestep;
float3 boxSize;
float3 spherePos;
float sphereRadius;

[numthreads(100,1,1)] // Thread groups. In short, this means calling the Integrate function once for every particle.
void Integrate (uint3 id: SV_DISPATCHTHREADID) {
    // _particles[id.x].currentForce = float3(0, (-9.81 * particleMass), 0); // Gravity before other forces for testing only. Leave commented out.

    // Next two lines is basically F = ma => a = F/m => updated velocity = initial velocity + F/m * timestep.
    float3 updatedVelocity = _particles[id.x].velocity + ((_particles[id.x].currentForce/particleMass) * timestep);
    _particles[id.x].position += updatedVelocity * timestep;

    // Keep the particles in the confines of the simulator container.
    // When particles hit the boundary, the velocity is updated to send it back inside the container wall.
    float3 topRight = boxSize / 2;
    float3 bottomLeft = -boxSize/2;

    // Minimum boundary.
    if (_particles[id.x].position.x - radius < bottomLeft.x) {
     updatedVelocity.x *= boundDamping;
        _particles[id.x].position.x = bottomLeft.x + radius;
    }

    if (_particles[id.x].position.y - radius < bottomLeft.y) {
     updatedVelocity.y *= boundDamping;
        _particles[id.x].position.y = bottomLeft.y + radius;
    }

    if (_particles[id.x].position.z - radius < bottomLeft.z) {
     updatedVelocity.z *= boundDamping;
        _particles[id.x].position.z = bottomLeft.z + radius;
    }

    // Maximum boundary.
    if (_particles[id.x].position.x + radius > topRight.x) {
     updatedVelocity.x *= boundDamping;
        _particles[id.x].position.x = topRight.x - radius;
    }

    if (_particles[id.x].position.y + radius > topRight.y) {
     updatedVelocity.y *= boundDamping;
        _particles[id.x].position.y = topRight.y - radius;
    }

    if (_particles[id.x].position.z + radius > topRight.z) {
     updatedVelocity.z *= boundDamping;
        _particles[id.x].position.z = topRight.z - radius;
    }

    _particles[id.x].velocity = updatedVelocity;
}

// Smoothing function adn apply it to the sum. (For the ComputeDensityPressure function.)
float StdKernel(float distanceSquared) {
    float x = 1.0f - distanceSquared / radius2;
    return 315.f / ( 64.f * pi * radius3 ) * x * x * x; // Poly kernel.
}

// Compute density and pressure for each particle.
// In theory, neighbouring particles contribute to a particle's density due to their mass. Closer neighbours contribute exponentially more to a particle's density.
// When density is higher => higher pressure.
// Higher pressure => higher force that moves particles away from each other.
[numthreads(100,1,1)]
void ComputeDensityPressure(uint3 id: SV_DISPATCHTHREADID) {
    float3 origin = _particles[id.x].position;
    float sum = 0;
    
    // For each particle,
    for (int i = 0; i < particleLength; i++) {
        // Calcualte the distance to the current particle
        float3 diff = origin - _particles[i].position;
        // Acceptance proximity distance for this particle. Beyond this, those particles are ignored.
        float distanceSquared = dot(diff, diff);
        // If the radius squared encloses the acceptance proximity distance,
        if (radius2 * 0.004 > distanceSquared * 0.004) {
            // Use this to calculate the density and pressure around the particle. Otherwise discard it for calculating.
            sum += StdKernel(distanceSquared * 0.004); // Apply smoothing kernel.
        } 
    }
    
    _particles[id.x].density = sum * particleMass + 0.000001f;
    _particles[id.x].pressure = gasConstant * (_particles[id.x].density - restDensity); // pressure = k(rho-rho0)
}

float SpikyKernelFirstDerivative(float distance) {
    float x = 1.0f - distance / radius;
    return -45.0f / ( pi * radius4 ) * x * x;
}

float SpikyKernelSecondDerivative(float distance) {
    float x = 1.0f - distance / radius;
    return 90.f / ( pi * radius5 ) * x;
}

float3 SpikyKernelGradient(float distance, float3 direction) {
    return SpikyKernelFirstDerivative(distance) * direction;
}

// Compute pressure and viscosity forces for each particle.
// Pressure - repels particles from each other as they get closer.
// Viscosity - keeps particles together and moving in the same velocity.
[numthreads(100,1,1)]
void ComputeForces (uint3 id: SV_DISPATCHTHREADID) {
    // Navier Stokes equation.
    float3 origin = _particles[id.x].position;
    float density2 = _particles[id.x].density * _particles[id.x].density; 
    float mass2 = particleMass * particleMass;
    float3 pressure = float3(0,0,0);
    float3 visc = float3(0,0,0);
    
    for (int i = 0; i < particleLength; i++) {

        if (origin.x == _particles[i].position.x && origin.y == _particles[i].position.y && origin.z == _particles[i].position.z) {
            continue;
        }

        float dist = distance(_particles[i].position, origin);
        if (dist < radius * 2) {
            float3 pressureGradientDirection = normalize(_particles[id.x].position - _particles[i].position);

            float3 _pressureContribution = mass2 * SpikyKernelGradient(dist, pressureGradientDirection);
            _pressureContribution *= (_particles[id.x].pressure / density2 + _particles[i].pressure / (_particles[i].density * _particles[i].density));

            float3 _viscosityContribution = viscosity * mass2 * (_particles[i].velocity - _particles[id.x].velocity) / _particles[i].density;
            _viscosityContribution *= SpikyKernelSecondDerivative(dist);

            pressure += _pressureContribution;
            visc += _viscosityContribution;

            // pressure += mass2 * ( _particles[id.x].pressure / density2 + _particles[i].pressure / ( _particles[i].density * _particles[i].density ) ) * SpikyKernelGradient(dist, pressureGradientDirection);   // Kim
            // visc += viscosity * mass2 * ( _particles[i].velocity - _particles[id.x].velocity ) / _particles[i].density * SpikyKernelSecondDerivative(dist);
        }
    }

    _particles[id.x].currentForce = float3(0,(-9.81 * particleMass), 0) - pressure + visc;

    // Handle Collision, e.g. from the collision test sphere.
    float3 collisionDirection = _particles[id.x].position - spherePos;

    if (length(collisionDirection) < sphereRadius) {
        // float mag = sphereRadius/length(collisionDirection);
        _particles[id.x].currentForce += collisionDirection * 10000;
    }

    // + pressure + visc/_particles[id.x].density;
}